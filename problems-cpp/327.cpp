#include<iostream>
#include<vector>
#include<memory>
#include<set>
#include<map>
#include<algorithm>
using namespace std;

// Hash + BIT + BST

long long findAnswerStd(vector<int>& nums, int lb, int ub) {
	long long ans = 0;
	for (int i = 0; i < nums.size(); i++) {
		for (int j = 0; j <= i; j++) {
			long long w = 0;
			for (int k = j; k <= i; k++) {
				w += nums[k];
			}
			if (w >= lb && w <= ub) {
				ans++;
			}
		}
	}
	return ans;
}
int findAnswer(vector<int>& nums, int lb, int ub) {
	using LInt = long long;
	int nL = nums.size();
	unique_ptr<LInt[]> pre = make_unique<LInt[]>(nL);
	unique_ptr<int[]> sIdx = make_unique<int[]>(nL);
	pre[0] = nums[0];
	sIdx[0] = 0;
	for (int i = 1; i < nL; i++) {
		pre[i] = pre[i - 1] + nums[i];
		sIdx[i] = i;
	}
	map<LInt, int> remap;
	map<int, int> remapId;
	sort(sIdx.get(), sIdx.get() + nL, [&](const int& a, const int& b) {
		return pre[a] < pre[b];
	});
	for (int i = 0; i < nL; i++) {
		remap[pre[sIdx[i]]] = i + 1;
		remapId[sIdx[i]] = i + 1;
	}
	
	int tLast = 0, tV = nL, tIt = 0;
	while (tV) {
		tLast = tV;
		tIt += 1;
		tV -= (tV & (-tV));
	}
	int mxNd = (tLast << (tIt > 1));
	unique_ptr<int[]> nds = make_unique<int[]>(mxNd + 1);

	auto queryT = [&](int r) {
		int ret = 0;
		while (r) {
			ret += nds[r];
			r -= (r & (-r));
		}
		return ret;
	};
	
	auto insT = [&](int x) {
		while (x <= mxNd) {
			nds[x]++;
			x += (x & (-x));
		}
	};
	
	int ans = 0;
	
	cout << "MaxNd:" << mxNd << endl;
	for (int i = 0; i < nL; i++) {
		cout << "Prefix:" << i << ":" << pre[i] << endl;
	}
	for (int i = 0; i < nL; i++) {
		if (pre[i] >= lb && pre[i] <= ub) {
			ans += 1;
		}
		auto lowerIter = remap.lower_bound(pre[i] - ub);
		auto upperIter = remap.upper_bound(pre[i] - lb);
		int qL, qR;
		if (lowerIter != remap.end()) {
			qL = (*lowerIter).second;
			if (upperIter == remap.end()) {
				qR = remap.rbegin()->second;
			}
			else {
				qR = (*upperIter).second - 1;
			}

			int aR = queryT(qR);
			int aL = (qL - 1 >= 1) ? queryT(qL - 1) : 0;

			cout << "Pos:" << i << " -> [" << pre[i] - ub << "," << pre[i] - lb << "]" << "Added " << (aR - aL) << "+" << (pre[i] >= lb && pre[i] <= ub) << endl;
			cout << "QL,QR" << qL << "," << qR << endl;
			cout << "AL,AR=" << aL << "," << aR << endl;
			cout << "Updating:" << remap[pre[i]] << endl;

			ans += max(aR - aL, 0);


		}
		
		
		
		insT(remap[pre[i]]);
	}
	return ans;
}

int main() {
	int n, a, b;
	cin >> n >> a >> b;
	vector<int> v;
	//v = { 2147483551,-2147483645,2147483590,-2147483647,2147483645,2147483560,-2147483590,2147483587,-2147483561,-2147483608,2147483573,-2147483579,-2147483567,-2147483618,-2147483567,2147483637,-2147483620,2147483621,-2147483637,-2147483637,-2147483643,-2147483631,2147483573,2147483574,-2147483605,-2147483622,-2147483556,-2147483589,-2147483610,-2147483567,-2147483633,2147483639,-2147483548,-2147483571,-2147483590,2147483633,2147483593,2147483584,-2147483595,2147483613,-2147483591,2147483570,-2147483616,-2147483560,-2147483646,2147483633,-2147483610,2147483548,2147483570,-2147483587,2147483645,-2147483634,-2147483584,-2147483601,2147483629,-2147483647,-2147483572,-2147483605,2147483643,2147483553,-2147483563,2147483639,-2147483615,-2147483589,2147483556,2147483610,-2147483554,-2147483600,2147483573,-2147483610,2147483635,-2147483549,-2147483637,-2147483582,-2147483580,2147483627,-2147483621,2147483549,-2147483580,2147483613,-2147483641,2147483615,2147483549,-2147483584,2147483618,-2147483580,-2147483553,-2147483645,-2147483568,2147483637,-2147483619,2147483631,2147483607,-2147483604,2147483557,2147483629,2147483597,2147483595,2147483613,-2147483597,-2147483644,-2147483622,-2147483579,2147483562,-2147483622,2147483647,2147483635,-2147483603,-2147483619,2147483587,-2147483582,-2147483640,2147483595,-2147483613,-2147483620,2147483612,-2147483611,2147483560,-2147483589,2147483646,-2147483555,2147483632,2147483558,-2147483582,-2147483647,2147483559,2147483607,-2147483606,-2147483577,-2147483578,-2147483553,-2147483592,-2147483647,-2147483623,-2147483610,2147483641,2147483591,-2147483555,2147483567,-2147483626,2147483553,-2147483555,-2147483635,2147483584,-2147483613,-2147483573,-2147483583,2147483562,2147483580,2147483587,-2147483592,-2147483611,-2147483622,-2147483552,2147483557,-2147483623,2147483567,-2147483620,2147483624,2147483554,2147483549,2147483558,-2147483568,-2147483637,2147483606,2147483598,2147483630,-2147483554,-2147483572,-2147483572,2147483610,-2147483618,2147483587,-2147483609,2147483613,-2147483554,-2147483559,2147483602,2147483646,-2147483625,-2147483557,-2147483619,2147483640,-2147483619,2147483601,2147483574,-2147483592,2147483582,-2147483607,2147483551,2147483625,2147483619,-2147483588,2147483585,2147483574,-2147483563,-2147483628,2147483615,-2147483621,2147483588,-2147483604,2147483622,-2147483584,2147483615,2147483596,2147483620,2147483570,2147483606,-2147483580,-2147483625,-2147483629,-2147483578,2147483557,2147483633,2147483591,2147483564,2147483611,2147483561,2147483622,-2147483574,2147483618,2147483599,2147483638,2147483569,2147483615,-2147483557,2147483637,2147483591,-2147483607,-2147483626,-2147483584,2147483612,-2147483585,2147483643,-2147483559,-2147483575,2147483577,-2147483646,2147483575,2147483616,-2147483574,-2147483550,-2147483575,-2147483581,-2147483613,2147483624,-2147483553,2147483624,-2147483621,-2147483595,2147483561,-2147483629,-2147483605,-2147483561,-2147483575,-2147483618,-2147483603,-2147483558,2147483571,2147483621,2147483613,2147483635,2147483603,-2147483614,2147483553,2147483553,2147483585,2147483636,2147483574,-2147483625,-2147483551,-2147483571,-2147483618,2147483637,2147483605,2147483642,2147483641,-2147483570,2147483552,2147483592,2147483647,-2147483634,-2147483635,-2147483625,2147483588,2147483621,2147483599,-2147483632,2147483605,-2147483622,-2147483641,2147483636,-2147483639,2147483557,2147483609,-2147483562,-2147483604,-2147483625,-2147483567,2147483551,-2147483551,2147483645,-2147483636,2147483549,2147483615,2147483625,-2147483627,2147483620,2147483609,-2147483629,2147483630,-2147483615,2147483593,-2147483559,-2147483588,-2147483627,-2147483603,-2147483606,2147483592,2147483560,-2147483564,2147483599,-2147483595,-2147483638,2147483592,-2147483629,-2147483623,-2147483576,2147483548,-2147483611,-2147483556,-2147483560,2147483552,2147483616,2147483584,2147483636,-2147483608,-2147483640,2147483596,2147483592,-2147483596,-2147483578,-2147483612,-2147483587,-2147483574,-2147483565,2147483614,-2147483614,-2147483637,2147483634,2147483580,2147483634,-2147483566,2147483554,2147483632,-2147483645,-2147483597,-2147483603,2147483609,-2147483591,-2147483643,-2147483582,2147483622,-2147483550,2147483604,2147483624,-2147483600,-2147483608,2147483628,2147483624,-2147483554,-2147483582,2147483572,2147483576,-2147483574,2147483586,2147483627,-2147483566,-2147483623,2147483552,-2147483627,-2147483599,-2147483611,2147483602,2147483616,2147483571,-2147483633,2147483621,-2147483563,2147483614,2147483587,-2147483596,-2147483566,-2147483627,2147483583,-2147483594,-2147483620,-2147483610,2147483603,-2147483555,-2147483624,2147483565,2147483623,2147483634,2147483582,2147483637,-2147483608,-2147483605,-2147483636,-2147483556,-2147483644,2147483551,-2147483593,2147483586,2147483647,-2147483563,-2147483606,2147483550,2147483630,-2147483588,-2147483643,-2147483548,-2147483620,-2147483559,2147483577,-2147483614,2147483608,2147483580,-2147483628,-2147483630,2147483567,-2147483551,-2147483624,-2147483577,-2147483644,2147483607,-2147483561,2147483619,2147483621,-2147483591,2147483569,-2147483580,-2147483621,2147483576,-2147483639,-2147483590,-2147483602,-2147483634,-2147483572,2147483574,2147483571,-2147483644,-2147483584,-2147483571,2147483561,-2147483599,-2147483620,-2147483567,-2147483584,2147483548,2147483607,2147483623,2147483578,2147483553,-2147483611,2147483614,2147483604,2147483610,-2147483560,2147483599,2147483574,2147483570,-2147483577,-2147483569,-2147483613,-2147483606,2147483584,-2147483560,-2147483637,-2147483611,2147483637,-2147483576,2147483587,2147483642,-2147483572,-2147483571,2147483610,-2147483553,-2147483586,-2147483554,-2147483613,-2147483550,-2147483618,-2147483578,-2147483641,2147483569,-2147483614,2147483585,2147483612,2147483635 };
	
	for (int i = 0; i < n; i++) {
		int t;
		cin >> t;
		v.push_back(t);
	}
	cout << "Opt:" << findAnswer(v, a, b) << endl;
	cout << "Std:" << findAnswerStd(v, a, b) << endl;
	return 0;
}